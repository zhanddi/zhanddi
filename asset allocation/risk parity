import pandas as pd
import numpy as np
import datetime
from scipy.optimize import minimize
TOLERANCE = 1e-10
import pandas_datareader.data as web


def _allocation_risk(weights,covariances):
    portfolio_risk=np.sqrt((weights*covariances*weights.T))[0,0]
    return portfolio_risk

def _assets_risk_contribution_to_allocation_risk(weights,covariances):
    portfolio_risk=_allocation_risk(weights,covariances)
    assets_risk_contribution = np.multiply(weights.T, covariances * weights.T) / portfolio_risk
    return assets_risk_contribution

def _risk_budget_objective_error(weights, args):
    covariances = args[0]
    assets_risk_budget = args[1]
    weights = np.matrix(weights)
    portfolio_risk = _allocation_risk(weights, covariances)
    assets_risk_contribution = 1/_assets_risk_contribution_to_allocation_risk(weights, covariances)
    assets_risk_target = 1/np.asmatrix(np.multiply(portfolio_risk, assets_risk_budget))
    error = sum(np.square(assets_risk_contribution - assets_risk_target.T))[0, 0]
    return error
    
def _get_risk_parity_weights(covariances, assets_risk_budget, initial_weights):
    constraints = ({'type': 'eq', 'fun': lambda x: np.sum(x) - 1.0},{'type': 'ineq', 'fun': lambda x: x})
    optimize_result = minimize(fun=_risk_budget_objective_error,
                                x0=initial_weights,
                               args=[covariances, assets_risk_budget],
                               method='SLSQP',
                               constraints=constraints,
                               tol=TOLERANCE,
                               options={'disp': False})
    weights = optimize_result.x
    return weights
def get_weights(yahoo_tickers=['GOOGL', 'AAPL', 'AMZN'],
                start_date=datetime.datetime(2016, 10, 31),
                end_date=datetime.datetime(2017, 10, 31)):

    # We download the prices from Yahoo Finance
    prices = pd.DataFrame([web.DataReader(t,
                                          'yahoo',
                                          start_date,
                                          end_date).loc[:, 'Adj Close']
                           for t in yahoo_tickers],
                          index=yahoo_tickers).T.asfreq('B').ffill()

    # We calculate the covariance matrix
    covariances = 52.0 * \
        prices.asfreq('W-FRI').pct_change().iloc[1:, :].cov().values

    # The desired contribution of each asset to the portfolio risk: we want all
    # asset to contribute equally
    assets_risk_budget = [1 / prices.shape[1]] * prices.shape[1]

    # Initial weights: equally weighted
    init_weights = [1 / prices.shape[1]] * prices.shape[1]

    # Optimisation process of weights
    weights = \
        _get_risk_parity_weights(covariances, assets_risk_budget, init_weights)

    # Convert the weights to a pandas Series
    weights = pd.Series(weights, index=prices.columns, name='weight')

    # It returns the optimised weights
    return weights
